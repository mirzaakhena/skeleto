Framework is not about HTTP Protocol or is not about database connection

Framework is about 
  - how you organize your code
  - how the code work together

Type

Context

ActionHandler, Request, Response

Closure

Primary and Secondary Function

Currently function does not support decorator that's why we can utilize the JSDoc as a decorator

JSDoc

JSDoc as Decorator

Decorator data


Closure Return Value as Function Name

Controller -> Service -> Repository

Controller -> Primary Action (UseCase) -> Secondary Action (Gateway)

Why not putting all together Controller Usecase and Gateway in one function? Because there is reusable function

Why using type of function instead of interface ? Because we want to apply segregation of interface and avoid fat interface

Dependency Injection 
  Function
  Function Parameter
  Client Code to inject the Object to Function through Function Parameter

@Action
  What
  Where
  Structure
  2 Stage
  readTypeArguments: true
  ActionHandler
  UseCase and Gateway Concept

@Config
  What
  Where
  Structure
  1 Stage
  Example: Database object, Logger Object

@Wrapper
  What
  Where
  Decorator Pattern
  Structure
  3 Stage
  Conditional Inject
  ordinal: 0 
  WrapperHandler
  Example: Logging, Transaction, Recorder

Dependency Injection In @Action, @Config, @Wrapper,   

Manual Injection Code

Automatic Injection Code 

Instantiation Order : @Config, @Wrapper, @Action 

Testing

Recording and Replay

OpenAPI

Controller with Express

Using getDataSourceFromContext method

Database Transaction

Auto Repository

AI Code Generated

