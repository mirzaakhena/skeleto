import { ActionHandler, WrapperHandler } from "skeleto";

export type LogConfig = { level: "debug" | "info" | "warn" | "error" };

/** @Config */
export function implLogConfig(): LogConfig {
  return { level: "debug" };
}

export type FindCityByName = ActionHandler<{ name: string }, { city: string } | null>;

/** @Action */
export function implFindCityByName(): FindCityByName {
  return async (ctx, req) => {
    if (req.name === "ade") return { name: "ade", city: "Jakarta" };
    if (req.name === "asep") return { name: "asep", city: "Bandung" };
    if (req.name === "anto") return { name: "anto", city: "Yogyakarta" };
    return null;
  };
}

type HelloWorldRequest = { name: string };
type HelloWorldResponse = { message: string };
export type HelloWorld = ActionHandler<HelloWorldRequest, HelloWorldResponse>;

/** @Action */
export function implHelloWorld(findCity: FindCityByName): HelloWorld {
  return async (ctx, req) => {
    //

    console.log(`In Helloworld implementation`);

    const result = await findCity(ctx, req);
    if (!result) return { message: `Hello ${req.name}` };

    return { message: `Hello ${req.name}, you are from ${result.city}` };
  };
}

export type Logging = WrapperHandler;

/** @Wrapper */
export function implLogging(config: LogConfig): Logging {
  return (actionHandler, functionMetadata): ActionHandler => {
    return async (ctx, req) => {
      //

      if (config.level === "debug") console.log(`>>>> Debug: Calling ${functionMetadata.name}`);

      console.log(`Before ${functionMetadata.name} is running`);

      const result = await actionHandler(ctx, req);

      console.log(`After ${functionMetadata.name} is running`);

      if (config.level === "debug") console.log(`>>>> Debug: ${functionMetadata.name} completed`);

      return result;
    };
  };
}
